
firmware_atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003a8  0000041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e1f  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000881  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000779  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000284  00000000  00000000  000023b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004af  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007e5  00000000  00000000  00002ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000032cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_21>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  8e:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <adcBegin>:
//Verifica se conversão foi concluída
//Retorna valor 0 se conversão concluída. 64 se não.
//---------------------------------------------------------------------------
uint8_t adcOk(void)
{ return (ADCSRA & (1<<ADSC));
}
  96:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  9e:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  a2:	81 11       	cpse	r24, r1
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <adcBegin+0x1a>
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	9f 73       	andi	r25, 0x3F	; 63
  ae:	90 83       	st	Z, r25
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	11 f0       	breq	.+4      	; 0xb8 <adcBegin+0x22>
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	40 f0       	brcs	.+16     	; 0xc8 <adcBegin+0x32>
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	9f 77       	andi	r25, 0x7F	; 127
  c0:	90 83       	st	Z, r25
  c2:	90 81       	ld	r25, Z
  c4:	90 64       	ori	r25, 0x40	; 64
  c6:	90 83       	st	Z, r25
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	29 f4       	brne	.+10     	; 0xd6 <adcBegin+0x40>
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 6c       	ori	r24, 0xC0	; 192
  d4:	80 83       	st	Z, r24
  d6:	ec e7       	ldi	r30, 0x7C	; 124
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8f 7d       	andi	r24, 0xDF	; 223
  de:	80 83       	st	Z, r24
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	87 68       	ori	r24, 0x87	; 135
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <adcChannel>:
  ec:	86 30       	cpi	r24, 0x06	; 6
  ee:	30 f4       	brcc	.+12     	; 0xfc <adcChannel+0x10>
  f0:	ec e7       	ldi	r30, 0x7C	; 124
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	90 81       	ld	r25, Z
  f6:	90 7f       	andi	r25, 0xF0	; 240
  f8:	98 2b       	or	r25, r24
  fa:	90 83       	st	Z, r25
  fc:	86 30       	cpi	r24, 0x06	; 6
  fe:	31 f4       	brne	.+12     	; 0x10c <adcChannel+0x20>
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	98 60       	ori	r25, 0x08	; 8
 10a:	90 83       	st	Z, r25
 10c:	87 30       	cpi	r24, 0x07	; 7
 10e:	31 f4       	brne	.+12     	; 0x11c <adcChannel+0x30>
 110:	ec e7       	ldi	r30, 0x7C	; 124
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	9e 60       	ori	r25, 0x0E	; 14
 11a:	90 83       	st	Z, r25
 11c:	88 30       	cpi	r24, 0x08	; 8
 11e:	28 f0       	brcs	.+10     	; 0x12a <adcChannel+0x3e>
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	8f 60       	ori	r24, 0x0F	; 15
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret

0000012c <adcIntEn>:
 12c:	88 23       	and	r24, r24
 12e:	31 f0       	breq	.+12     	; 0x13c <adcIntEn+0x10>
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 60       	ori	r24, 0x08	; 8
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	87 7f       	andi	r24, 0xF7	; 247
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <adcSample>:
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <adcReadOnly>:

//---------------------------------------------------------------------------
//Ler o ADC e retorna o valor lido do ADC
//---------------------------------------------------------------------------
uint16_t adcReadOnly()
{ return (ADCL | (ADCH<<8));//retorna o valor do ADC 
 154:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 158:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	98 2f       	mov	r25, r24
 160:	88 27       	eor	r24, r24
}
 162:	82 2b       	or	r24, r18
 164:	08 95       	ret

00000166 <main>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include "adc.h"
#include "uart.h"
int main(void)
{ uartBegin(9600, F_CPU); //Inicializa UART
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	32 e1       	ldi	r19, 0x12	; 18
 16a:	4a e7       	ldi	r20, 0x7A	; 122
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	60 e8       	ldi	r22, 0x80	; 128
 170:	75 e2       	ldi	r23, 0x25	; 37
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 01 01 	call	0x202	; 0x202 <uartBegin>
	adcBegin(AVCC, 0x01); //Inicializa A/D
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 4b 00 	call	0x96	; 0x96 <adcBegin>
	adcChannel(ADC0); //Seleciona canal
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 76 00 	call	0xec	; 0xec <adcChannel>
	adcIntEn(1); //Interrupção do A/D
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 96 00 	call	0x12c	; 0x12c <adcIntEn>
	sei(); //Interrupção geral
 18e:	78 94       	sei
	while (1)
	{ if (uartRxOk()) //verifica se existe novo dado na uart
 190:	0e 94 2f 01 	call	0x25e	; 0x25e <uartRxOk>
 194:	88 23       	and	r24, r24
 196:	e1 f3       	breq	.-8      	; 0x190 <main+0x2a>
		if (uartRx() == 'C')//Se sim, verifica se foi 'C'
 198:	0e 94 33 01 	call	0x266	; 0x266 <uartRx>
 19c:	83 34       	cpi	r24, 0x43	; 67
 19e:	c1 f7       	brne	.-16     	; 0x190 <main+0x2a>
		adcSample(); //Inicia conversão
 1a0:	0e 94 a4 00 	call	0x148	; 0x148 <adcSample>
 1a4:	f5 cf       	rjmp	.-22     	; 0x190 <main+0x2a>

000001a6 <__vector_21>:
	}
}
//Tratamendo da interrupção do A/D
ISR(ADC_vect)
{ uartString("Valor: "); //Envia string
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 36 01 	call	0x26c	; 0x26c <uartString>
	uartDec2B(adcReadOnly());//Ler e envia valor do A/D
 1d0:	0e 94 aa 00 	call	0x154	; 0x154 <adcReadOnly>
 1d4:	0e 94 47 01 	call	0x28e	; 0x28e <uartDec2B>
	uartString("\r\n"); //Nova linha
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 36 01 	call	0x26c	; 0x26c <uartString>
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <uartBegin>:
  } while (valor!=0);
  for (disp=conta-1; disp>=0; disp-- )//envia valores do vetor digitos
  { while (!uartTxOk());  //aguarda último dado ser enviado
    uartTx(digitos[disp]);//envia algarismo
  }
}
 202:	cf 92       	push	r12
 204:	df 92       	push	r13
 206:	ef 92       	push	r14
 208:	ff 92       	push	r15
 20a:	6b 01       	movw	r12, r22
 20c:	7c 01       	movw	r14, r24
 20e:	ca 01       	movw	r24, r20
 210:	b9 01       	movw	r22, r18
 212:	68 94       	set
 214:	13 f8       	bld	r1, 3
 216:	96 95       	lsr	r25
 218:	87 95       	ror	r24
 21a:	77 95       	ror	r23
 21c:	67 95       	ror	r22
 21e:	16 94       	lsr	r1
 220:	d1 f7       	brne	.-12     	; 0x216 <uartBegin+0x14>
 222:	a7 01       	movw	r20, r14
 224:	96 01       	movw	r18, r12
 226:	0e 94 a1 01 	call	0x342	; 0x342 <__udivmodsi4>
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	31 09       	sbc	r19, r1
 22e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 232:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 236:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 23a:	88 e1       	ldi	r24, 0x18	; 24
 23c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 240:	86 e0       	ldi	r24, 0x06	; 6
 242:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	df 90       	pop	r13
 24c:	cf 90       	pop	r12
 24e:	08 95       	ret

00000250 <uartTxOk>:
 250:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 254:	80 72       	andi	r24, 0x20	; 32
 256:	08 95       	ret

00000258 <uartTx>:
 258:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 25c:	08 95       	ret

0000025e <uartRxOk>:
 25e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 262:	80 78       	andi	r24, 0x80	; 128
 264:	08 95       	ret

00000266 <uartRx>:
 266:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 26a:	08 95       	ret

0000026c <uartString>:
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
 272:	07 c0       	rjmp	.+14     	; 0x282 <uartString+0x16>
 274:	0e 94 28 01 	call	0x250	; 0x250 <uartTxOk>
 278:	88 23       	and	r24, r24
 27a:	e1 f3       	breq	.-8      	; 0x274 <uartString+0x8>
 27c:	89 91       	ld	r24, Y+
 27e:	0e 94 2c 01 	call	0x258	; 0x258 <uartTx>
 282:	88 81       	ld	r24, Y
 284:	81 11       	cpse	r24, r1
 286:	f6 cf       	rjmp	.-20     	; 0x274 <uartString+0x8>
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <uartDec2B>:

//---------------------------------------------------------------------------
//Envia pela uart variavel de 2 bytes (16 bits) com digitos em decimal
//---------------------------------------------------------------------------
void uartDec2B(uint16_t valor)
{ int8_t disp;
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	00 d0       	rcall	.+0      	; 0x296 <uartDec2B+0x8>
 296:	00 d0       	rcall	.+0      	; 0x298 <uartDec2B+0xa>
 298:	1f 92       	push	r1
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	fc 01       	movw	r30, r24
  char digitos[5];
  int8_t conta = 0;
 2a0:	10 e0       	ldi	r17, 0x00	; 0
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <uartDec2B+0x18>
  do //converte o valor armazenando os algarismos no vetor digitos
  { disp = (valor%10) + 48;//armazena o resto da divisao por 10 e soma com 48
    valor /= 10;
    digitos[conta]=disp;
    conta++;
 2a4:	18 2f       	mov	r17, r24
void uartDec2B(uint16_t valor)
{ int8_t disp;
  char digitos[5];
  int8_t conta = 0;
  do //converte o valor armazenando os algarismos no vetor digitos
  { disp = (valor%10) + 48;//armazena o resto da divisao por 10 e soma com 48
 2a6:	9f 01       	movw	r18, r30
 2a8:	ad ec       	ldi	r26, 0xCD	; 205
 2aa:	bc ec       	ldi	r27, 0xCC	; 204
 2ac:	0e 94 c3 01 	call	0x386	; 0x386 <__umulhisi3>
 2b0:	96 95       	lsr	r25
 2b2:	87 95       	ror	r24
 2b4:	96 95       	lsr	r25
 2b6:	87 95       	ror	r24
 2b8:	96 95       	lsr	r25
 2ba:	87 95       	ror	r24
 2bc:	9c 01       	movw	r18, r24
 2be:	22 0f       	add	r18, r18
 2c0:	33 1f       	adc	r19, r19
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	82 0f       	add	r24, r18
 2d0:	93 1f       	adc	r25, r19
 2d2:	9f 01       	movw	r18, r30
 2d4:	28 1b       	sub	r18, r24
 2d6:	39 0b       	sbc	r19, r25
 2d8:	40 e3       	ldi	r20, 0x30	; 48
 2da:	42 0f       	add	r20, r18
    valor /= 10;
 2dc:	9f 01       	movw	r18, r30
 2de:	0e 94 c3 01 	call	0x386	; 0x386 <__umulhisi3>
 2e2:	fc 01       	movw	r30, r24
 2e4:	f6 95       	lsr	r31
 2e6:	e7 95       	ror	r30
 2e8:	f6 95       	lsr	r31
 2ea:	e7 95       	ror	r30
 2ec:	f6 95       	lsr	r31
 2ee:	e7 95       	ror	r30
    digitos[conta]=disp;
 2f0:	a1 e0       	ldi	r26, 0x01	; 1
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	ac 0f       	add	r26, r28
 2f6:	bd 1f       	adc	r27, r29
 2f8:	a1 0f       	add	r26, r17
 2fa:	b1 1d       	adc	r27, r1
 2fc:	17 fd       	sbrc	r17, 7
 2fe:	ba 95       	dec	r27
 300:	4c 93       	st	X, r20
    conta++;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	81 0f       	add	r24, r17
  } while (valor!=0);
 306:	30 97       	sbiw	r30, 0x00	; 0
 308:	69 f6       	brne	.-102    	; 0x2a4 <uartDec2B+0x16>
 30a:	10 c0       	rjmp	.+32     	; 0x32c <uartDec2B+0x9e>
  for (disp=conta-1; disp>=0; disp-- )//envia valores do vetor digitos
  { while (!uartTxOk());	 //aguarda último dado ser enviado
 30c:	0e 94 28 01 	call	0x250	; 0x250 <uartTxOk>
 310:	88 23       	and	r24, r24
 312:	e1 f3       	breq	.-8      	; 0x30c <uartDec2B+0x7e>
    uartTx(digitos[disp]);//envia algarismo    
 314:	e1 e0       	ldi	r30, 0x01	; 1
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	ec 0f       	add	r30, r28
 31a:	fd 1f       	adc	r31, r29
 31c:	e1 0f       	add	r30, r17
 31e:	f1 1d       	adc	r31, r1
 320:	17 fd       	sbrc	r17, 7
 322:	fa 95       	dec	r31
 324:	80 81       	ld	r24, Z
 326:	0e 94 2c 01 	call	0x258	; 0x258 <uartTx>
  { disp = (valor%10) + 48;//armazena o resto da divisao por 10 e soma com 48
    valor /= 10;
    digitos[conta]=disp;
    conta++;
  } while (valor!=0);
  for (disp=conta-1; disp>=0; disp-- )//envia valores do vetor digitos
 32a:	11 50       	subi	r17, 0x01	; 1
 32c:	11 23       	and	r17, r17
 32e:	74 f7       	brge	.-36     	; 0x30c <uartDec2B+0x7e>
  { while (!uartTxOk());	 //aguarda último dado ser enviado
    uartTx(digitos[disp]);//envia algarismo    
  }
}  
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	08 95       	ret

00000342 <__udivmodsi4>:
 342:	a1 e2       	ldi	r26, 0x21	; 33
 344:	1a 2e       	mov	r1, r26
 346:	aa 1b       	sub	r26, r26
 348:	bb 1b       	sub	r27, r27
 34a:	fd 01       	movw	r30, r26
 34c:	0d c0       	rjmp	.+26     	; 0x368 <__udivmodsi4_ep>

0000034e <__udivmodsi4_loop>:
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	ee 1f       	adc	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	a2 17       	cp	r26, r18
 358:	b3 07       	cpc	r27, r19
 35a:	e4 07       	cpc	r30, r20
 35c:	f5 07       	cpc	r31, r21
 35e:	20 f0       	brcs	.+8      	; 0x368 <__udivmodsi4_ep>
 360:	a2 1b       	sub	r26, r18
 362:	b3 0b       	sbc	r27, r19
 364:	e4 0b       	sbc	r30, r20
 366:	f5 0b       	sbc	r31, r21

00000368 <__udivmodsi4_ep>:
 368:	66 1f       	adc	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	88 1f       	adc	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	1a 94       	dec	r1
 372:	69 f7       	brne	.-38     	; 0x34e <__udivmodsi4_loop>
 374:	60 95       	com	r22
 376:	70 95       	com	r23
 378:	80 95       	com	r24
 37a:	90 95       	com	r25
 37c:	9b 01       	movw	r18, r22
 37e:	ac 01       	movw	r20, r24
 380:	bd 01       	movw	r22, r26
 382:	cf 01       	movw	r24, r30
 384:	08 95       	ret

00000386 <__umulhisi3>:
 386:	a2 9f       	mul	r26, r18
 388:	b0 01       	movw	r22, r0
 38a:	b3 9f       	mul	r27, r19
 38c:	c0 01       	movw	r24, r0
 38e:	a3 9f       	mul	r26, r19
 390:	70 0d       	add	r23, r0
 392:	81 1d       	adc	r24, r1
 394:	11 24       	eor	r1, r1
 396:	91 1d       	adc	r25, r1
 398:	b2 9f       	mul	r27, r18
 39a:	70 0d       	add	r23, r0
 39c:	81 1d       	adc	r24, r1
 39e:	11 24       	eor	r1, r1
 3a0:	91 1d       	adc	r25, r1
 3a2:	08 95       	ret

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
