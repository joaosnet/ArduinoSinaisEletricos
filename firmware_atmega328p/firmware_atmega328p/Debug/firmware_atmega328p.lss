
firmware_atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000043e  000004d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080012e  0080012e  00000500  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e81  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a6  00000000  00000000  000014f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000815  00000000  00000000  00001d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000025b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000530  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b0  00000000  00000000  00002dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003670  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 32       	cpi	r26, 0x2F	; 47
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  9e:	0c 94 1d 02 	jmp	0x43a	; 0x43a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adcBegin>:
  a6:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  aa:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  ae:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  b2:	81 11       	cpse	r24, r1
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <adcBegin+0x1a>
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	9f 73       	andi	r25, 0x3F	; 63
  be:	90 83       	st	Z, r25
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	11 f0       	breq	.+4      	; 0xc8 <adcBegin+0x22>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	40 f0       	brcs	.+16     	; 0xd8 <adcBegin+0x32>
  c8:	ec e7       	ldi	r30, 0x7C	; 124
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	9f 77       	andi	r25, 0x7F	; 127
  d0:	90 83       	st	Z, r25
  d2:	90 81       	ld	r25, Z
  d4:	90 64       	ori	r25, 0x40	; 64
  d6:	90 83       	st	Z, r25
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	29 f4       	brne	.+10     	; 0xe6 <adcBegin+0x40>
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 6c       	ori	r24, 0xC0	; 192
  e4:	80 83       	st	Z, r24
  e6:	ec e7       	ldi	r30, 0x7C	; 124
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8f 7d       	andi	r24, 0xDF	; 223
  ee:	80 83       	st	Z, r24
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	87 68       	ori	r24, 0x87	; 135
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret

000000fc <adcChannel>:
  fc:	86 30       	cpi	r24, 0x06	; 6
  fe:	30 f4       	brcc	.+12     	; 0x10c <adcChannel+0x10>
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	98 2b       	or	r25, r24
 10a:	90 83       	st	Z, r25
 10c:	86 30       	cpi	r24, 0x06	; 6
 10e:	31 f4       	brne	.+12     	; 0x11c <adcChannel+0x20>
 110:	ec e7       	ldi	r30, 0x7C	; 124
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	98 60       	ori	r25, 0x08	; 8
 11a:	90 83       	st	Z, r25
 11c:	87 30       	cpi	r24, 0x07	; 7
 11e:	31 f4       	brne	.+12     	; 0x12c <adcChannel+0x30>
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	90 7f       	andi	r25, 0xF0	; 240
 128:	9e 60       	ori	r25, 0x0E	; 14
 12a:	90 83       	st	Z, r25
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	28 f0       	brcs	.+10     	; 0x13a <adcChannel+0x3e>
 130:	ec e7       	ldi	r30, 0x7C	; 124
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	8f 60       	ori	r24, 0x0F	; 15
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret

0000013c <adcIntEn>:
 13c:	88 23       	and	r24, r24
 13e:	31 f0       	breq	.+12     	; 0x14c <adcIntEn+0x10>
 140:	ea e7       	ldi	r30, 0x7A	; 122
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 60       	ori	r24, 0x08	; 8
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	87 7f       	andi	r24, 0xF7	; 247
 154:	80 83       	st	Z, r24
 156:	08 95       	ret

00000158 <adcSample>:
 158:	ea e7       	ldi	r30, 0x7A	; 122
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <adcReadOnly>:
 164:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 168:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	98 2f       	mov	r25, r24
 170:	88 27       	eor	r24, r24
 172:	82 2b       	or	r24, r18
 174:	08 95       	ret

00000176 <main>:

volatile uint8_t current_channel = ADC0;

int main(void)
{
    uartBegin(9600, F_CPU); //Inicializa UART
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	32 e1       	ldi	r19, 0x12	; 18
 17a:	4a e7       	ldi	r20, 0x7A	; 122
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	60 e8       	ldi	r22, 0x80	; 128
 180:	75 e2       	ldi	r23, 0x25	; 37
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 42 01 	call	0x284	; 0x284 <uartBegin>
    adcBegin(AVCC, 0x01); //Inicializa ADC
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <adcBegin>
    adcChannel(current_channel); //Seleciona canal
 192:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 196:	0e 94 7e 00 	call	0xfc	; 0xfc <adcChannel>
    adcIntEn(1); //Interrupção do A/D
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 9e 00 	call	0x13c	; 0x13c <adcIntEn>
    uartIntRx(1); //Interrupção da uart
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <uartIntRx>
    sei(); //Interrupção geral
 1a6:	78 94       	sei
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <main+0x32>

000001aa <__vector_18>:
    while (1); //Laço infinito
}

//Tratamendo da interrupção de recepção de dados
ISR(USART_RX_vect)
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
    if (uartRx() == 'C')//Verifica se recebeu 'C'
 1cc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <uartRx>
 1d0:	83 34       	cpi	r24, 0x43	; 67
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <__vector_18+0x2e>
        adcSample(); //Inicia conversão
 1d4:	0e 94 ac 00 	call	0x158	; 0x158 <adcSample>
}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_21>:

//Tratamendo da interrupção do A/D
ISR(ADC_vect)
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
    // Verifica qual canal está sendo lido e envia o nome correspondente para a UART
    if (current_channel == ADC0) {
 21c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 220:	81 11       	cpse	r24, r1
 222:	05 c0       	rjmp	.+10     	; 0x22e <__vector_21+0x34>
        uartString("Canal: ADC0, Valor: ");
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 81 01 	call	0x302	; 0x302 <uartString>
 22c:	04 c0       	rjmp	.+8      	; 0x236 <__vector_21+0x3c>
    } else {
        uartString("Canal: ADC1, Valor: ");
 22e:	85 e1       	ldi	r24, 0x15	; 21
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 81 01 	call	0x302	; 0x302 <uartString>
    }

    uartDec2B(adcReadOnly());//Ler e envia valor do A/D
 236:	0e 94 b2 00 	call	0x164	; 0x164 <adcReadOnly>
 23a:	0e 94 92 01 	call	0x324	; 0x324 <uartDec2B>
    uartString("\r\n");
 23e:	8a e2       	ldi	r24, 0x2A	; 42
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 81 01 	call	0x302	; 0x302 <uartString>

    // Alterna entre os canais ADC0 e ADC1
    if (current_channel == ADC0) {
 246:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 24a:	81 11       	cpse	r24, r1
 24c:	04 c0       	rjmp	.+8      	; 0x256 <__vector_21+0x5c>
        current_channel = ADC1;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 254:	02 c0       	rjmp	.+4      	; 0x25a <__vector_21+0x60>
    } else {
        current_channel = ADC0;
 256:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
    }
    adcChannel(current_channel); //Seleciona novo canal
 25a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 25e:	0e 94 7e 00 	call	0xfc	; 0xfc <adcChannel>
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	7f 91       	pop	r23
 270:	6f 91       	pop	r22
 272:	5f 91       	pop	r21
 274:	4f 91       	pop	r20
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <uartBegin>:
 284:	cf 92       	push	r12
 286:	df 92       	push	r13
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	6b 01       	movw	r12, r22
 28e:	7c 01       	movw	r14, r24
 290:	ca 01       	movw	r24, r20
 292:	b9 01       	movw	r22, r18
 294:	68 94       	set
 296:	13 f8       	bld	r1, 3
 298:	96 95       	lsr	r25
 29a:	87 95       	ror	r24
 29c:	77 95       	ror	r23
 29e:	67 95       	ror	r22
 2a0:	16 94       	lsr	r1
 2a2:	d1 f7       	brne	.-12     	; 0x298 <uartBegin+0x14>
 2a4:	a7 01       	movw	r20, r14
 2a6:	96 01       	movw	r18, r12
 2a8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__udivmodsi4>
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	31 09       	sbc	r19, r1
 2b0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2b4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2b8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2bc:	88 e1       	ldi	r24, 0x18	; 24
 2be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2c8:	ff 90       	pop	r15
 2ca:	ef 90       	pop	r14
 2cc:	df 90       	pop	r13
 2ce:	cf 90       	pop	r12
 2d0:	08 95       	ret

000002d2 <uartTxOk>:
 2d2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2d6:	80 72       	andi	r24, 0x20	; 32
 2d8:	08 95       	ret

000002da <uartTx>:
 2da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2de:	08 95       	ret

000002e0 <uartRx>:
 2e0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2e4:	08 95       	ret

000002e6 <uartIntRx>:
 2e6:	88 23       	and	r24, r24
 2e8:	31 f0       	breq	.+12     	; 0x2f6 <uartIntRx+0x10>
 2ea:	e1 ec       	ldi	r30, 0xC1	; 193
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	80 68       	ori	r24, 0x80	; 128
 2f2:	80 83       	st	Z, r24
 2f4:	08 95       	ret
 2f6:	e1 ec       	ldi	r30, 0xC1	; 193
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	8f 77       	andi	r24, 0x7F	; 127
 2fe:	80 83       	st	Z, r24
 300:	08 95       	ret

00000302 <uartString>:
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	ec 01       	movw	r28, r24
 308:	07 c0       	rjmp	.+14     	; 0x318 <uartString+0x16>
 30a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <uartTxOk>
 30e:	88 23       	and	r24, r24
 310:	e1 f3       	breq	.-8      	; 0x30a <uartString+0x8>
 312:	89 91       	ld	r24, Y+
 314:	0e 94 6d 01 	call	0x2da	; 0x2da <uartTx>
 318:	88 81       	ld	r24, Y
 31a:	81 11       	cpse	r24, r1
 31c:	f6 cf       	rjmp	.-20     	; 0x30a <uartString+0x8>
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <uartDec2B>:
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	00 d0       	rcall	.+0      	; 0x32c <uartDec2B+0x8>
 32c:	00 d0       	rcall	.+0      	; 0x32e <uartDec2B+0xa>
 32e:	1f 92       	push	r1
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	fc 01       	movw	r30, r24
 336:	10 e0       	ldi	r17, 0x00	; 0
 338:	01 c0       	rjmp	.+2      	; 0x33c <uartDec2B+0x18>
 33a:	18 2f       	mov	r17, r24
 33c:	9f 01       	movw	r18, r30
 33e:	ad ec       	ldi	r26, 0xCD	; 205
 340:	bc ec       	ldi	r27, 0xCC	; 204
 342:	0e 94 0e 02 	call	0x41c	; 0x41c <__umulhisi3>
 346:	96 95       	lsr	r25
 348:	87 95       	ror	r24
 34a:	96 95       	lsr	r25
 34c:	87 95       	ror	r24
 34e:	96 95       	lsr	r25
 350:	87 95       	ror	r24
 352:	9c 01       	movw	r18, r24
 354:	22 0f       	add	r18, r18
 356:	33 1f       	adc	r19, r19
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	82 0f       	add	r24, r18
 366:	93 1f       	adc	r25, r19
 368:	9f 01       	movw	r18, r30
 36a:	28 1b       	sub	r18, r24
 36c:	39 0b       	sbc	r19, r25
 36e:	40 e3       	ldi	r20, 0x30	; 48
 370:	42 0f       	add	r20, r18
 372:	9f 01       	movw	r18, r30
 374:	0e 94 0e 02 	call	0x41c	; 0x41c <__umulhisi3>
 378:	fc 01       	movw	r30, r24
 37a:	f6 95       	lsr	r31
 37c:	e7 95       	ror	r30
 37e:	f6 95       	lsr	r31
 380:	e7 95       	ror	r30
 382:	f6 95       	lsr	r31
 384:	e7 95       	ror	r30
 386:	a1 e0       	ldi	r26, 0x01	; 1
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	ac 0f       	add	r26, r28
 38c:	bd 1f       	adc	r27, r29
 38e:	a1 0f       	add	r26, r17
 390:	b1 1d       	adc	r27, r1
 392:	17 fd       	sbrc	r17, 7
 394:	ba 95       	dec	r27
 396:	4c 93       	st	X, r20
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	81 0f       	add	r24, r17
 39c:	30 97       	sbiw	r30, 0x00	; 0
 39e:	69 f6       	brne	.-102    	; 0x33a <uartDec2B+0x16>
 3a0:	10 c0       	rjmp	.+32     	; 0x3c2 <uartDec2B+0x9e>
 3a2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <uartTxOk>
 3a6:	88 23       	and	r24, r24
 3a8:	e1 f3       	breq	.-8      	; 0x3a2 <uartDec2B+0x7e>
 3aa:	e1 e0       	ldi	r30, 0x01	; 1
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	ec 0f       	add	r30, r28
 3b0:	fd 1f       	adc	r31, r29
 3b2:	e1 0f       	add	r30, r17
 3b4:	f1 1d       	adc	r31, r1
 3b6:	17 fd       	sbrc	r17, 7
 3b8:	fa 95       	dec	r31
 3ba:	80 81       	ld	r24, Z
 3bc:	0e 94 6d 01 	call	0x2da	; 0x2da <uartTx>
 3c0:	11 50       	subi	r17, 0x01	; 1
 3c2:	11 23       	and	r17, r17
 3c4:	74 f7       	brge	.-36     	; 0x3a2 <uartDec2B+0x7e>
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	08 95       	ret

000003d8 <__udivmodsi4>:
 3d8:	a1 e2       	ldi	r26, 0x21	; 33
 3da:	1a 2e       	mov	r1, r26
 3dc:	aa 1b       	sub	r26, r26
 3de:	bb 1b       	sub	r27, r27
 3e0:	fd 01       	movw	r30, r26
 3e2:	0d c0       	rjmp	.+26     	; 0x3fe <__udivmodsi4_ep>

000003e4 <__udivmodsi4_loop>:
 3e4:	aa 1f       	adc	r26, r26
 3e6:	bb 1f       	adc	r27, r27
 3e8:	ee 1f       	adc	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	a2 17       	cp	r26, r18
 3ee:	b3 07       	cpc	r27, r19
 3f0:	e4 07       	cpc	r30, r20
 3f2:	f5 07       	cpc	r31, r21
 3f4:	20 f0       	brcs	.+8      	; 0x3fe <__udivmodsi4_ep>
 3f6:	a2 1b       	sub	r26, r18
 3f8:	b3 0b       	sbc	r27, r19
 3fa:	e4 0b       	sbc	r30, r20
 3fc:	f5 0b       	sbc	r31, r21

000003fe <__udivmodsi4_ep>:
 3fe:	66 1f       	adc	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	88 1f       	adc	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	1a 94       	dec	r1
 408:	69 f7       	brne	.-38     	; 0x3e4 <__udivmodsi4_loop>
 40a:	60 95       	com	r22
 40c:	70 95       	com	r23
 40e:	80 95       	com	r24
 410:	90 95       	com	r25
 412:	9b 01       	movw	r18, r22
 414:	ac 01       	movw	r20, r24
 416:	bd 01       	movw	r22, r26
 418:	cf 01       	movw	r24, r30
 41a:	08 95       	ret

0000041c <__umulhisi3>:
 41c:	a2 9f       	mul	r26, r18
 41e:	b0 01       	movw	r22, r0
 420:	b3 9f       	mul	r27, r19
 422:	c0 01       	movw	r24, r0
 424:	a3 9f       	mul	r26, r19
 426:	70 0d       	add	r23, r0
 428:	81 1d       	adc	r24, r1
 42a:	11 24       	eor	r1, r1
 42c:	91 1d       	adc	r25, r1
 42e:	b2 9f       	mul	r27, r18
 430:	70 0d       	add	r23, r0
 432:	81 1d       	adc	r24, r1
 434:	11 24       	eor	r1, r1
 436:	91 1d       	adc	r25, r1
 438:	08 95       	ret

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
